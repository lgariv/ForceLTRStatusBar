name: Beta Build
on:
    push:
        branches:
            - test-build
env:
    DEVELOPER_DIR: /Applications/Xcode_11.7.app/Contents/Developer
    SYSROOT: theos/sdks/iPhoneOS13.5.sdk
    #PATH: /usr/local/Cellar/make/libexec/gnubin:$PATH
jobs:
    build:
        name: Build Tweak
        runs-on: macOS-latest
        env:
            THEOS: theos

        steps:
            #    - name: Cache multiple paths
            #      id: cache-dependencies
            #      uses: actions/cache@v2
            #      with:
            #          path: |
            #              ~/.zprofile
            #              theos/
            #              /usr/local/Cellar/
            #              /usr/local/opt/
            #          key: ${{ runner.os }}-test-build-${{ steps.get-date.outputs.date }}
            #          restore-keys: |
            #              ${{ runner.os }}-test-build-

            - name: Checkout
              uses: actions/checkout@master

            - name: Install Dependencies
              if: steps.cache-dependencies.outputs.cache-hit != 'true'
              run: |
                  set +e
                  brew install ldid xz
                  brew update
                  brew upgrade
                  brew doctor
                  brew cleanup
                  exit 0
                  set -e

            - name: Setup Theos
              if: steps.cache-dependencies.outputs.cache-hit != 'true'
              uses: actions/checkout@master
              with:
                  repository: lgariv/theos
                  ref: abd8d442ba2df9c1cc1b1133e28bda31d704ba7f
                  path: theos
                  submodules: recursive

            - name: Update Make
              if: steps.cache-dependencies.outputs.cache-hit != 'true'
              run: |
                  brew install make
                  echo PATH=\"$(brew --prefix make)/libexec/gnubin:\$PATH\" >> ~/.zprofile

            - name: Update Theos
              if: steps.cache-dependencies.outputs.cache-hit != 'true'
              run: |
                  set +e
                  make update-theos
                  exit 0
                  set -e

            - name: Build Package
              id: build_package
              run: |
                  source ~/.zprofile
                  make package FINALPACKAGE=1
                  echo "::set-output name=package::$(ls -t packages | head -n1)"
                  echo "::set-output name=exit_code::$?"

            - name: Manage Version
              if: ${{ steps.build_package.outputs.package != 0 }}
              run: |
                  set +e
                  git fetch --prune --unshallow --tags
                  VERSION="$(cat control | grep Version | sed -n 's/Version: //gp')"
                  echo "::set-env name=TWEAK_VER::$VERSION"
                  CUR_TAG="$(git tag -l | grep beta)"
                  if [[ -z $CUR_TAG ]]; then
                    echo "::set-env name=OLD_PRE_TAG::"
                  else
                    echo "::set-env name=OLD_PRE_TAG::$CUR_TAG"
                  fi
                  exit 0
                  set -e
              env:
                  ACTIONS_ALLOW_UNSECURE_COMMANDS: "true"

            - name: Delete Old Prerelease (if there are any)
              uses: dev-drprasad/delete-tag-and-release@v0.1.2
              if: ${{ env.OLD_PRE_TAG != 0 && steps.build_package.outputs.package != 0 }}
              with:
                  tag_name: ${{ env.OLD_PRE_TAG }}
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

            - name: Create Release
              if: ${{ steps.build_package.outputs.package != 0 }}
              id: create_release
              uses: actions/create-release@v1
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              with:
                  tag_name: v${{ env.TWEAK_VER }}-beta
                  release_name: Beta v${{ env.TWEAK_VER }}
                  draft: false
                  prerelease: true

            - name: Upload Release Asset
              if: ${{ steps.build_package.outputs.package != 0 }}
              uses: actions/upload-release-asset@v1
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              with:
                  upload_url: ${{ steps.create_release.outputs.upload_url }}
                  asset_path: ./packages/${{ steps.build_package.outputs.package }}
                  asset_name: ${{ steps.build_package.outputs.package }}
                  asset_content_type: application/vnd.debian.binary-package
